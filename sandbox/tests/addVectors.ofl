#undef OCCA_USING_OPENMP
#define OCCA_USING_OPENMP 1
#undef OCCA_USING_CPU
#define OCCA_USING_CPU 1

device, real(4) function addTwoNumbers1(a, b)
  implicit none

  real(4), intent(in) :: a, b

  addTwoNumbers1 = a + b

end function addTwoNumbers1

device subroutine addTwoNumbers2(ab, a, b)
  implicit none

  real(4), intent(in)  :: a, b
  real(4), intent(out) :: ab

  ab = a + b

end subroutine addTwoNumbers2

device subroutine mxm(A, n1, B, n2, C, n3)
  real A(n1,n2), B(n2,n3), C(n1,n3)

  integer i, j, k
  integer n1, n2, n3

  do i = 1, n1*n3
     C(i,1) = 0
  end do

  do j = 1, n3
     do k = 1, n2
        tmp = B(k,j)
        do i = 1, n1
           C(i,j) = C(i,j) + (A(i,k) * tmp)
        end do
     end do
  end do

  return
end subroutine mxm

kernel subroutine addVectors(entries, a, b, ab, a2, b2, ab2)
  implicit none

  integer(4), intent(in)  :: entries
  real(4)   , intent(in)  :: a(entries), b(entries, entries)
  real(4)   , intent(out) :: ab(entries)

  real(4) a2(entries), b2(entries, entries), ab2(entries)

  integer(4), dimension(4)      :: array1D
  integer(4), dimension(4,8)    :: array2D
  integer(4), dimension(4,8,16) :: array3D

  integer(4), shared    :: sharedVar(16,30)
  integer(4), exclusive :: exclusiveVar

  integer(4)   :: int_t
  integer2(4)  :: int2_t
  integer3(4)  :: int3_t
  integer4(4)  :: int4_t
  integer8(4)  :: int8_t
  integer16(4) :: int16_t

  integer16(1) :: int16_1_t
  integer16(2) :: int16_2_t
  integer16(4) :: int16_4_t
  integer16(8) :: int16_8_t

  real16(4) :: float16_4_t
  real16(8) :: float16_8_t

  integer :: group, item, N

  do group = 1, entries, 16, outer0
     do item = 1, 16, inner0
        N = (item + (16 * (group - 1)))

        call addTwoNumbers1(ab(1), a(1), b(1))

        sharedVar(1,2)
        array1D(1)
        array2D(1,2)
        array3D(1,2,3)

        int_t   = 0
        int2_t  = 0
        int3_t  = 0
        int4_t  = 0
        int8_t  = 0
        int16_t = 0

        int2_t%x = 0

        int16_1_t = 0
        int16_2_t = 0
        int16_4_t = 0
        int16_8_t = 0

        float16_4_t = 0
        float16_8_t = 0

        if (N < entries) then
           ab(i) = a(i) + b(i, 1)
        else if (N < entries) then
           N = 0
        else
           N = 1
        end if

        if (N < entries) ab(i) = a(i) + b(i, 1)

        do while (.TRUE.)
           N = 2
        end do
     end do
  end do

  do group = 1, entries, 16, outer0
     do item = 1, 16, inner0
        N = (item + (16 * (group - 1)))

        if (N < entries) then
           ab(i) = a(i) + b(i, 2)
        end if
     end do
  end do

  do group = 1, entries, 16, outer0
     do item = 1, 16, inner0
        N = (item + (16 * (group - 1)))

        if (N < entries) then
           ab(i) = a(i) + b(i, 3)
        end if
     end do
  end do

end subroutine addVectors
