#if 0
void (*fp1)(void *a);
void (*fp2[3])(void *);

struct __darwin_pthread_handler_rec
{
 void (*__routine)(void *);
 void *__arg;
 struct __darwin_pthread_handler_rec *__next;
};
#endif

#if 1

#  if 1
union blah {
  int i;
};
#  else
struct blah {
  struct {
    int j;
  };

  int i;
} b23;
#  endif

typedef struct blah2 { int j = 0; } b2;
typedef double d3;

void addVectors(int entries,
                const float * a,
                const float * b,
                float * ab){
  for(int group = 0; group < (20 + 3 - 1); ++group; outer0){
    for(int item = 0; item < itemsPerGroup; ++item; inner0){
      b23;
      blah blkasjdf;
      struct blah ajskdlf;

      if((item + group*itemsPerGroup) < entries)
        ab[item] = a[item] + b[item];
    }
  }

#pragma hello omp()  \
  blah ()
#line blah blah
  for(int groupB = 0; groupB < (20 + 3 - 1); ++groupB; outer1){
    for(int groupA = 0; groupA < (20 + 3 - 1); ++groupA; outer0){
      for(int itemB = 0; itemB < itemsPerGroupB; ++itemB; inner0){
        for(int itemA = 0; itemA < itemsPerGroupA; ++itemA; inner1){
          if((itemA + groupA*itemsPerGroupA) < entries)
            ab[itemA] = a[itemA] + b[itemA];
        }
      }

      for(int itemB = 0; itemB < itemsPerGroupB; ++itemB; inner0){
        for(int itemA = 0; itemA < itemsPerGroupA; ++itemA; inner1){
          if((itemA + groupA*itemsPerGroupA) < entries)
            ab[itemA] = a[itemA] + b[itemA];
        }
      }
    }
  }
}
#else
occaKernel void addVectors(int occaVariable entries,
                           const float * a,
                           const float * b,
                           float * ab){
  occaOuterFor0{
    occaInnerFor0{
      for(int i = 0; i < 3; ++i)
        if(i < 3)
          ab[i] = a[i] + b[i];
        else
          ab[i] = a[i] + b[i];
    }
  }
}
#endif
