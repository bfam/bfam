
#undef __restrict__

#define __restrict__ restrict

void midg(  int K,
            float * __restrict__ vgeo,
            float * __restrict__ surfinfo,
            float * __restrict__ f_Dr,
            float * __restrict__ f_Ds,
            float * __restrict__ f_Dt,
            float * __restrict__ f_LIFT,
            float * __restrict__ f_Q,
            float * __restrict__ f_rhsQ,
            float * __restrict__ f_resQ,
            float * __restrict__ f_inQ,
            float * __restrict__ f_outQ,
            float frka, float frkb, float fdt){

  int p;
  register unsigned int n, m;

  const int p_Np = 10;
  const int p_Nfp = 6;
  const int p_Nfaces = 4;
  const int p_Nfields = 6;

  float  f_DrT[p_Np][p_Np] __attribute__ ((__aligned__));
  float  f_DsT[p_Np][p_Np] __attribute__ ((__aligned__));
  float  f_DtT[p_Np][p_Np] __attribute__ ((__aligned__));

  for(n=0;n<p_Np;++n){
    for(m=0;m<p_Np;++m){
      f_DrT[m][n] = f_Dr[n*p_Np+m];
      f_DsT[m][n] = f_Ds[n*p_Np+m];
      f_DtT[m][n] = f_Dt[n*p_Np+m];
    }
  }

  float LIFT_T[p_Nfaces*p_Nfp][p_Np] __attribute__ ((__aligned__));
  for(n=0;n<p_Np;++n){
    for(m=0;m<p_Nfaces*p_Nfp;++m){
      LIFT_T[m][n] = f_LIFT[n*p_Nfaces*p_Nfp+m];
    }
  }


  /* NOTE: should be local memory */
  float rhsHx[p_Np] __attribute__ ((__aligned__));
  float rhsHy[p_Np] __attribute__ ((__aligned__));
  float rhsHz[p_Np] __attribute__ ((__aligned__));
  float rhsEx[p_Np] __attribute__ ((__aligned__));
  float rhsEy[p_Np] __attribute__ ((__aligned__));
  float rhsEz[p_Np] __attribute__ ((__aligned__));

  for(int k=0;k<K;++k){

    /* NOTE: once k is known, all other indexing variables etc are derived */

    /* NOTE: index into geometric factors */
    int geoid=k*12;

    const float drdx = vgeo[geoid++], drdy = vgeo[geoid++], drdz = vgeo[geoid++]; ++geoid;
    const float dsdx = vgeo[geoid++], dsdy = vgeo[geoid++], dsdz = vgeo[geoid++]; ++geoid;
    const float dtdx = vgeo[geoid++], dtdy = vgeo[geoid++], dtdz = vgeo[geoid++]; ++geoid;

    /* NOTE: buffer element k into local storage */
    const float * __restrict__ qpt = f_Q+p_Nfields*p_Np*k;

    for(m=0;m<p_Np;++m){
      rhsHx[m] = 0;
      rhsHy[m] = 0;
      rhsHz[m] = 0;
      rhsEx[m] = 0;
      rhsEy[m] = 0;
      rhsEz[m] = 0;
    }

    for(m=0;m<p_Np;++m){

      const float * __restrict__ qm = qpt + p_Nfields*m;

      const float nHx = qm[0];
      const float nHy = qm[1];
      const float nHz = qm[2];
      const float nEx = qm[3];
      const float nEy = qm[4];
      const float nEz = qm[5];

      const float * __restrict__ f_DrTm = f_DrT[m];
      const float * __restrict__ f_DsTm = f_DsT[m];
      const float * __restrict__ f_DtTm = f_DtT[m];

      for(n=0;n<p_Np;++n){

        const float dr = f_DrTm[n];
        const float ds = f_DsTm[n];
        const float dt = f_DtTm[n];
        const float dx = drdx*dr+dsdx*ds+dtdx*dt;
        const float dy = drdy*dr+dsdy*ds+dtdy*dt;
        const float dz = drdz*dr+dsdz*ds+dtdz*dt;

        rhsHx[n] += dz*nEy-dy*nEz;
        rhsHy[n] += dx*nEz-dz*nEx;
        rhsHz[n] += dy*nEx-dx*nEy;
        rhsEx[n] += dy*nHz-dz*nHy;
        rhsEy[n] += dz*nHx-dx*nHz;
        rhsEz[n] += dx*nHy-dy*nHx;
      }
    }

    /* NOTE: index into geometric factors */
    int surfid=k*7*p_Nfp*p_Nfaces;

    for(m=0;m<p_Nfp*p_Nfaces;++m){
      int   idM       = surfinfo[surfid++];
      int   idP       = surfinfo[surfid++];
      const float FSc = surfinfo[surfid++];
      const float BSc = surfinfo[surfid++];
      const float NXf = surfinfo[surfid++];
      const float NYf = surfinfo[surfid++];
      const float NZf = surfinfo[surfid++];

      float dHx, dHy, dHz, dEx, dEy, dEz;

      if(idP<0){
        idP = p_Nfields*(-1-idP);
        dHx = FSc*(f_inQ[idP++]  -f_Q[idM++]);
        dHy = FSc*(f_inQ[idP++]  -f_Q[idM++]);
        dHz = FSc*(f_inQ[idP++]  -f_Q[idM++]);
        dEx = FSc*(f_inQ[idP++]  -f_Q[idM++]);
        dEy = FSc*(f_inQ[idP++]  -f_Q[idM++]);
        dEz = FSc*(f_inQ[idP]    -f_Q[idM]);
      }else{
        dHx = FSc*(    f_Q[idP++]  -f_Q[idM++]);
        dHy = FSc*(    f_Q[idP++]  -f_Q[idM++]);
        dHz = FSc*(    f_Q[idP++]  -f_Q[idM++]);
        dEx = FSc*(BSc*f_Q[idP++]  -f_Q[idM++]);
        dEy = FSc*(BSc*f_Q[idP++]  -f_Q[idM++]);
        dEz = FSc*(BSc*f_Q[idP]    -f_Q[idM]);
      }

      const float ndotdH = NXf*dHx + NYf*dHy + NZf*dHz;
      const float ndotdE = NXf*dEx + NYf*dEy + NZf*dEz;

      const float fluxHx = -NYf*dEz + NZf*dEy + dHx - ndotdH*NXf;
      const float fluxHy = -NZf*dEx + NXf*dEz + dHy - ndotdH*NYf;
      const float fluxHz = -NXf*dEy + NYf*dEx + dHz - ndotdH*NZf;

      const float fluxEx =  NYf*dHz - NZf*dHy + dEx - ndotdE*NXf;
      const float fluxEy =  NZf*dHx - NXf*dHz + dEy - ndotdE*NYf;
      const float fluxEz =  NXf*dHy - NYf*dHx + dEz - ndotdE*NZf;

      const float * __restrict__ Lm = LIFT_T[m];

      for(n=0;n<p_Np;++n){
        /* NOTE: hint for compiler (nvcc) to unroll */
        const float L = Lm[n];

        rhsHx[n] += L*fluxHx;
        rhsHy[n] += L*fluxHy;
        rhsHz[n] += L*fluxHz;
        rhsEx[n] += L*fluxEx;
        rhsEy[n] += L*fluxEy;
        rhsEz[n] += L*fluxEz;

      }
    }

    float * __restrict__ f_resQk = f_resQ+p_Nfields*k*p_Np;

    // too complicated (fastest) - weirdness (row -> column)
    {
      int sk = 0;

      for(n=0;n<p_Np*6;++n)
        f_resQk[n] *= frka;

      for(n=0;n<p_Np;++n) {
        f_resQk[sk] +=  fdt*rhsHx[n]; ++sk;
        f_resQk[sk] +=  fdt*rhsHy[n]; ++sk;
        f_resQk[sk] +=  fdt*rhsHz[n]; ++sk;
        f_resQk[sk] +=  fdt*rhsEx[n]; ++sk;
        f_resQk[sk] +=  fdt*rhsEy[n]; ++sk;
        f_resQk[sk] +=  fdt*rhsEz[n]; ++sk;
      }
    }
  }

  for(k=0;k<K;++k){
    const int sk = k*p_Np*p_Nfields;

    for(n=0;n<p_Np*p_Nfields;++n){
      f_Q[sk+n] += frkb*f_resQ[sk+n];
    }
  }

}
