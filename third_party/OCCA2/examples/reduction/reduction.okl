occaKernel void reduction(const int entries,
                          const float *a,
                          float *aRed){

  // partial reduction of vector using loop tiles of size p_Nred (power of 2)
  for(int group = 0; group < ((entries + p_Nred - 1) / p_Nred); ++group; outer0){

    shared float s_a[p_Nred];

    for(int item = 0; item < p_Nred; ++item; inner0){
      if((group*p_Nred + item) < entries)
        s_a[item] = a[group*p_Nred + item];
      else
        s_a[item] = 0;
    }

    for(int alive = ((p_Nred + 1) / 2); 0 < alive; alive /= 2){

      barrier(localMemFence);

      for(int item = 0; item < p_Nred; ++item; inner0){
        if(item < alive)
          s_a[item] += s_a[item + alive];
      }
    }

    for(int item = 0; item < p_Nred; ++item; inner0){
      if(item==0){
        aRed[group] = s_a[0];
      }
    }
  }
}
