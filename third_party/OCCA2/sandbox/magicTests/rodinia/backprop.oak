#define ETA      0.1
#define MOMENTUM 0.2

#if 0
void bpnn_layerforward(float *l1,
                       float *l2,
                       float **conn,
                       int n1,
                       int n2){
  float sum;
  int j, k;

  l1[0] = 1.0;
#pragma omp parallel for     \
  shared(conn, n1, n2, l1)   \
  private(k, j)              \
  reduction(+: sum)          \
  schedule(static)
  for (j = 1; j <= n2; j++) {
    sum = 0.0;

    for (k = 0; k <= n1; k++)
      sum += conn[k][j] * l1[k];

    l2[j] = squash(sum);
  }
}
#endif

kernel void bpnn_layerforward(float *l1,
                              float *l2,
                              float *conn,
                              int n1,
                              int n2){
  float sum;
  int j, k;

  l1[0] = 1.0;

  for (j = 1; j <= n2; j++) {
    sum = 0.0;

    for (k = 0; k <= n1; k++)
      sum += conn[k*n2 + j] * l1[k];

    l2[j] = squash(sum);
  }
}

#if 0
void bpnn_adjust_weights(float *delta,
                         float *ndelta,
                         float *ly,
                         float *nly,
                         float **w,
                         float **oldw){
  float new_dw;
  int k, j;

  ly[0] = 1.0;

#pragma omp parallel for    \
  shared(oldw, w, delta)    \
  private(j, k, new_dw)     \
  firstprivate(ndelta, nly)
  for (j = 1; j <= ndelta; j++) {
    for (k = 0; k <= nly; k++) {
      new_dw = ((ETA * delta[j] * ly[k]) + (MOMENTUM * oldw[k][j]));

      w[k][j]   += new_dw;
      oldw[k][j] = new_dw;
    }
  }
}
#endif


#define ndelta 1000
#define nly    10

kernel void bpnn_adjust_weights(float *delta,
                                // float ndelta,
                                float *ly,
                                // float nly,
                                float *w,
                                float *oldw){
  float new_dw;
  int k, j;

  const int kOff = (ndelta + 1);

  ly[0] = 1.0;

  for (j = 1; j <= ndelta; j++) {
    for (k = 0; k <= nly; k++) {
      new_dw = ((ETA * delta[j] * ly[k]) + (MOMENTUM * oldw[k*kOff + j]));

      w[k*kOff + j]   += new_dw;
      oldw[k*kOff + j] = new_dw;
    }
  }
}
