#define p_Np          2
#define p_Npad        3
#define p_Nfields     5
#define p_KblkV       7
#define p_Nparameters 11

#define rx s_vgeofacs[0][kx]
#define ry s_vgeofacs[1][kx]
#define rz s_vgeofacs[2][kx]
#define sx s_vgeofacs[3][kx]
#define sy s_vgeofacs[4][kx]
#define sz s_vgeofacs[5][kx]
#define tx s_vgeofacs[6][kx]
#define ty s_vgeofacs[7][kx]
#define tz s_vgeofacs[8][kx]

typedef float  datafloat;
typedef float4 datafloat4;

kernel void acousticsVolumeKernelNew(const int  K,
                                     const int  Klev,
                                     const int  timeDirection,
                                     const int        * ks,
                                     const datafloat4 * Drst,
                                     const datafloat  * vgeofacs,
                                     const datafloat4 * xyz,
                                     const int        * PTypes,
                                     const datafloat  * paramDB,
                                     const datafloat  * Q,
                                     datafloat  * rhsQ0,
                                     datafloat  * rhsQ1,
                                     datafloat  * rhsQ2){ // (no restrict) pointers -> anonymous

  for(int ky=0; ky<(Klev+p_KblkV-1)/p_KblkV; ++ky){  // ky [Stride: 1, Bounds: [0, (Klev+p_KblkV-1)/p_KblkV]]

    shared datafloat s_p[p_KblkV][p_Np];             //
    shared datafloat s_UdotGr[p_KblkV][p_Np];        //
    shared datafloat s_UdotGs[p_KblkV][p_Np];        //
    shared datafloat s_UdotGt[p_KblkV][p_Np];        //

    shared datafloat s_vgeofacs[9][p_KblkV];         //

    exclusive int k, active;                         //

    int kx;

    for(kx=0; kx<p_KblkV; ++kx){                     // kx [Stride: 1, Bounds: [0, p_KblkV]]
      for(int n=0; n<p_Np; n++){                     // n  [Stride: 1, Bounds: [0, p_Np]   ]

        k = 0*18 + 1*kx + ky*p_KblkV;                // Made of kx (1), ky (p_KblkV)
                                                     // kx.bound <= ky.stride -> k is different for kx, ky
        active = (k < Klev);                         // Different for kx, ky

        if(active){                                  // Different for kx, ky
          // if(Klev != K)                              // Independent
          //   k = ks[k]-1;                             // injective ? ks[k] is different for kx, ky : k has LCD

          int m = n;                                 // Value different for n (1)
          while(m < 9){                              // m [Bounds: [n->0, 9]]
            s_vgeofacs[m][kx] = vgeofacs[m + 9*k];   // s_vgeofacs [Write: [m, kx]] Different for m -> n, kx
                                                     // vgeofacs   [Read : [m, k ]] DIfferent for m -> n, k -> kx, ky
            m += p_Np;                               // Local reduction on m, p_Np = n.bound -> while() is independent of n
          }

        }
      }
    }

    for(int kx=0; kx<p_KblkV; ++kx){                 // kx [Stride: 1, Bounds: [0, p_KblkV]]
      for(int n=0; n<p_Np; ++n){                     // n  [Stride: 1, Bounds: [0, p_Np]   ]

        if(active){                                  // Different for kx, ky
          int id = n + k*p_Nfields*p_Npad;           // Different for n (1), k -> kx, ky (p_Np < p_Nfields*p_Npad)
          datafloat pn = Q[id]; id+= p_Npad;         // Different fon n (1), k (p_Nfields*p_Npad); id = n (1), 1(p_Npad), k*(p_Nfields * p_Npad)
          datafloat un = Q[id]; id+= p_Npad;         // Q[id] (dependent on kx, ky, n); local reduction id, id still in bounds
          datafloat vn = Q[id]; id+= p_Npad;         // Q[id] (dependent on kx, ky, n); local reduction id, id still in bounds
          datafloat wn = Q[id];                      // Q[id] (dependent on kx, ky, n); local reduction id, id still in bounds

          s_p[kx][n] = pn;                           // Dependent on kx, n
          s_UdotGr[kx][n] = un*rx + vn*ry + wn*rz;   // Dependent on kx, n
          s_UdotGs[kx][n] = un*sx + vn*sy + wn*sz;   // Dependent on kx, n
          s_UdotGt[kx][n] = un*tx + vn*ty + wn*tz;   // Dependent on kx, n

          id = n + k*p_Nfields*p_Npad;               // Reset id, depends of n, kx, ky [NLCD: n, kx, ky]

#pragma unroll p_Nfields
          for(int fld=0; fld<p_Nfields; ++fld){      // fld [Stride: 1, Bounds: p_Nfields]
            rhsQ2[id] = rhsQ1[id];                   // rhsQ2 [Write: id], rhsQ1 [Read: id] [NLCD: n, kx, ky]
            rhsQ1[id] = rhsQ0[id]; id += p_Npad;     // rhsQ1 [Write: id], rhsQ0 [Read: id] [NLCD: n, kx, ky]
          }

        }
      }
    }

    for(int kx=0; kx<p_KblkV; ++kx){                 // kx [Stride: 1, Bounds: [0, p_KblkV]]
      for(int n=0; n<p_Np; ++n){                     // n  [Stride: 1, Bounds: [0, p_Np]   ]

        if(active){                                  // Depends on kx, ky
          datafloat dpdr = 0;                        // Non-dependent
          datafloat dpds = 0;                        // Non-dependent
          datafloat dpdt = 0;                        // Non-dependent
          datafloat divU = 0;                        // Non-dependent

          for(int m = 0; m < p_Np; ++m){             // m [Stride: 1, Bounds: [0, p_Np]]
            const datafloat4 Drst_nm = Drst[n + m*p_Np]; // Drst [Read: n, m]
            const datafloat pn = s_p[kx][m];         //
            dpdr += Drst_nm.x*pn;                    //
            dpds += Drst_nm.y*pn;                    //
            dpdt += Drst_nm.z*pn;                    //
            divU += Drst_nm.x*s_UdotGr[kx][m];       //
            divU += Drst_nm.y*s_UdotGs[kx][m];       //
            divU += Drst_nm.z*s_UdotGt[kx][m];       //
          }

          datafloat dpdx = rx*dpdr+sx*dpds+tx*dpdt;  //
          datafloat dpdy = ry*dpdr+sy*dpds+ty*dpdt;  //
          datafloat dpdz = rz*dpdr+sz*dpds+tz*dpdt;  //

          const int idMedium = PTypes[k*(p_Nfaces+1)];   //
          const datafloat c   = paramDB[p_Nparameters*idMedium+0]; //
          const datafloat rho = paramDB[p_Nparameters*idMedium+1]; //
          const datafloat ccRho = c*c*rho;           //
          const datafloat invRho = 1.f/rho;          //

          int id = n + k*p_Nfields*p_Npad;           //
          rhsQ0[id] = -ccRho * divU; id += p_Npad;   //
          rhsQ0[id] = -invRho * dpdx; id += p_Npad;  //
          rhsQ0[id] = -invRho * dpdy; id += p_Npad;  //
          rhsQ0[id] = -invRho * dpdz;                //
        }
      }
    }
  }
}
